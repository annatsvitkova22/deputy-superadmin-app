image: node:12.16.0

options:
  size: 2x

definitions:
  services:
    docker:
      memory: 7128

pipelines:
  branches:
    develop:
      - step:
          name: Prepare ENV
          script:
            - cp src/environments/environment.example.ts src/environments/environment.prod.ts
            - sed -i "s|API_KEY|$STAGING_API_KEY|g" src/environments/environment.prod.ts
            - sed -i "s|AUTH_DOMAIN|$STAGING_AUTH_DOMAIN|g" src/environments/environment.prod.ts
            - sed -i "s|DATABASE_URL|$STAGING_DATABASE_URL|g" src/environments/environment.prod.ts
            - sed -i "s|PROJECT_ID|$STAGING_PROJECT_ID|g" src/environments/environment.prod.ts
            - sed -i "s|STORAGE_BUCKET|$STAGING_STORAGE_BUCKET|g" src/environments/environment.prod.ts
            - sed -i "s|MESSAGING_SENDER_ID|$STAGING_MESSAGING_SENDER_ID|g" src/environments/environment.prod.ts
            - sed -i "s|APP_ID|$STAGING_APP_ID|g" src/environments/environment.prod.ts
            - sed -i "s|MEASUREMENT_ID|$STAGING_MEASUREMENT_ID|g" src/environments/environment.prod.ts
            - sed -i "s|BASE_FUNCTIONS_URL|$STAGING_BASE_FUNCTIONS_URL|g" src/environments/environment.prod.ts
            - cp src/environments/environment.example.ts src/environments/environment.ts
            - sed -i "s|API_KEY|$STAGING_API_KEY|g" src/environments/environment.ts
            - sed -i "s|AUTH_DOMAIN|$STAGING_AUTH_DOMAIN|g" src/environments/environment.ts
            - sed -i "s|DATABASE_URL|$STAGING_DATABASE_URL|g" src/environments/environment.ts
            - sed -i "s|PROJECT_ID|$STAGING_PROJECT_ID|g" src/environments/environment.ts
            - sed -i "s|STORAGE_BUCKET|$STAGING_STORAGE_BUCKET|g" src/environments/environment.ts
            - sed -i "s|MESSAGING_SENDER_ID|$STAGING_MESSAGING_SENDER_ID|g" src/environments/environment.ts
            - sed -i "s|APP_ID|$STAGING_APP_ID|g" src/environments/environment.ts
            - sed -i "s|MEASUREMENT_ID|$STAGING_MEASUREMENT_ID|g" src/environments/environment.ts
            - sed -i "s|BASE_FUNCTIONS_URL|$STAGING_BASE_FUNCTIONS_URL|g" src/environments/environment.ts
          artifacts:
            - src/environments/environment.prod.ts
            - src/environments/environment.ts
      - step:
          name: Build
          size: 2x
          script:
            - export IMAGE_NAME=$DOCKER_HUB_USERNAME/$APPLICATION_NAME:$BITBUCKET_COMMIT
            - docker build -t $IMAGE_NAME .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME
          services:
            - docker
      - step:
          name: Deploy
          deployment: staging
          script:
            - sed -i "s|{{image}}|$DOCKER_HUB_USERNAME/$APPLICATION_NAME:$BITBUCKET_COMMIT|g" deployment.yaml
            - sed -i "s|{{host}}|$STAGING_URL|g" deployment.yaml
            - sed -i "s|{{dockerconfigjson}}|$dockerconfigjson|g" deployment.yaml
            - sed -i "s|{{env}}|staging|g" deployment.yaml
            - pipe: atlassian/google-gke-kubectl-run:1.3.0
              variables:
                KEY_FILE: $GCLOUD_API_KEYFILE
                PROJECT: $GCLOUD_PROJECT
                COMPUTE_ZONE: $GCLOUD_COMPUTE_ZONE
                CLUSTER_NAME: $GCLOUD_CLUSTER_NAME
                KUBECTL_COMMAND: 'apply'
                RESOURCE_PATH: 'deployment.yaml'
    master:
      - step:
          name: Build
          size: 2x
          script:
            - export IMAGE_NAME=$DOCKER_HUB_USERNAME/$APPLICATION_NAME:$BITBUCKET_COMMIT
            - docker build -t $IMAGE_NAME .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME
          services:
            - docker
      - step:
          name: Deploy
          deployment: production
          script:
            - sed -i "s|{{image}}|$DOCKER_HUB_USERNAME/$APPLICATION_NAME:$BITBUCKET_COMMIT|g" deployment.yaml
            - sed -i "s|{{host}}|$PRODUCTION_URL|g" deployment.yaml
            - sed -i "s|{{dockerconfigjson}}|$dockerconfigjson|g" deployment.yaml
            - sed -i "s|{{env}}|production|g" deployment.yaml
            - sed -i "s|letsencrypt-production|letsencrypt-zmist-prod|g" deployment.yaml
            - pipe: atlassian/kubectl-run:1.2.0
              variables:
                KUBE_CONFIG: $PROD_KUBE
                KUBECTL_COMMAND: 'apply'
                RESOURCE_PATH: 'deployment.yaml'
                KUBECTL_ARGS:
                  - '--namespace=zmist'

